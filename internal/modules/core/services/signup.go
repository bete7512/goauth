package core_services

import (
	"context"
	"fmt"
	"time"

	"github.com/bete7512/goauth/internal/modules/core/handlers/dto"
	"github.com/bete7512/goauth/internal/modules/core/models"
	"github.com/bete7512/goauth/pkg/types"
	"github.com/google/uuid"
)

// Signup creates a new user account
func (s *CoreService) Signup(ctx context.Context, req *dto.SignupRequest) (*dto.AuthResponse, *types.GoAuthError) {
	// Check if user already exists
	if req.Email != "" {
		existing, _ := s.UserRepository.FindByEmail(ctx, req.Email)
		if existing != nil {
			return nil, types.NewUserAlreadyExistsError()
		}
	}

	if s.SecurityManager == nil {
		return nil, types.NewInternalError("security manager is nil")
	}
	// Hash password
	hashedPassword, err := s.SecurityManager.HashPassword(req.Password)
	if err != nil {
		return nil, types.NewInternalError(fmt.Sprintf("failed to hash password: %v", err.Error()))
	}

	// Create user
	user := &models.User{
		ID:           uuid.New().String(),
		Email:        req.Email,
		PasswordHash: string(hashedPassword),
		Name:         req.Name,
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}

	if err := s.UserRepository.Create(ctx, user); err != nil {
		return nil, types.NewInternalError(fmt.Sprintf("failed to create user: %v", err.Error()))
	}
	if req.ExtendedAttributes != nil {
		for _, attr := range req.ExtendedAttributes {
			_ = s.setAttribute(ctx, user.ID, attr.Name, attr.Value)
		}
	}

	// Auto-send verification if required
	if s.Config.RequireEmailVerification || s.Config.RequirePhoneVerification {
		if user.Email != "" {
			// Emit event for notification module to handle verification
			s.Deps.Events.EmitAsync(ctx, types.EventSendEmailVerification, map[string]interface{}{
				"user":              user,
				"email":             user.Email,
				"name":              user.Name,
				"verification_link": "https://yourapp.com/verify-email", // Will be generated by notification module
				"code":              "123456",                           // Will be generated by notification module
			})
		}

		if req.PhoneNumber != "" {
			// Emit event for notification module to handle verification
			s.Deps.Events.EmitAsync(ctx, types.EventSendPhoneVerification, map[string]interface{}{
				"user":         user,
				"email":        user.Email,
				"phone_number": req.PhoneNumber,
				"code":         "123456", // Will be generated by notification module
			})
		}
	}

	// If verification is required, do not create session until verified
	var sessionToken string
	emailVerified := false

	session := &models.Session{
		ID:        uuid.New().String(),
		UserID:    user.ID,
		Token:     sessionToken,
		ExpiresAt: time.Now().Add(s.Deps.Config.Security.Session.SessionDuration),
		CreatedAt: time.Now(),
	}
	if err := s.SessionRepository.Create(ctx, session); err != nil {
		return nil, types.NewInternalError(fmt.Sprintf("failed to create session: %v", err.Error()))
	}

	return &dto.AuthResponse{
		Token: sessionToken,
		User: &dto.UserDTO{
			ID:                  user.ID,
			FirstName:           user.FirstName,
			LastName:            user.LastName,
			Name:                user.Name,
			Email:               user.Email,
			Username:            req.Username,
			PhoneNumber:         req.PhoneNumber,
			Active:              user.Active,
			EmailVerified:       emailVerified,
			PhoneNumberVerified: user.PhoneNumberVerified,
			CreatedAt:           user.CreatedAt.Format(time.RFC3339),
			UpdatedAt:           user.UpdatedAt.Format(time.RFC3339),
			ExtendedAttributes: func() []dto.ExtendedAttributes {
				attrs := make([]dto.ExtendedAttributes, len(user.ExtendedAttributes))
				for i, attr := range user.ExtendedAttributes {
					attrs[i] = dto.ExtendedAttributes{Name: attr.Name, Value: attr.Value}
				}
				return attrs
			}(),
		},
		ExpiresIn: int64(s.Deps.Config.Security.Session.SessionDuration.Seconds()),
		Message:   signupMessage(emailVerified, user.PhoneNumberVerified, user.Email, req.PhoneNumber, s.Config.RequireEmailVerification, s.Config.RequirePhoneVerification),
	}, nil
}

func signupMessage(emailVerified bool, phoneVerified bool, email string, phone string, requireEmail bool, requirePhone bool) string {
	if requireEmail && email != "" && !emailVerified {
		return "Signup successful. Please verify your email to continue."
	}
	if requirePhone && phone != "" && !phoneVerified {
		return "Signup successful. Please verify your phone to continue."
	}
	return "Signup successful"
}
